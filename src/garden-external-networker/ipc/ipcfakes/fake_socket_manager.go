// Code generated by counterfeiter. DO NOT EDIT.
package ipcfakes

import (
	"garden-external-networker/ipc"
	"io"
	"net"
	"sync"

	"code.cloudfoundry.org/netplugin-shim/message"
)

type FakeSocketManager struct {
	ReadFileDescriptorStub        func(net.Conn) (uintptr, error)
	readFileDescriptorMutex       sync.RWMutex
	readFileDescriptorArgsForCall []struct {
		arg1 net.Conn
	}
	readFileDescriptorReturns struct {
		result1 uintptr
		result2 error
	}
	readFileDescriptorReturnsOnCall map[int]struct {
		result1 uintptr
		result2 error
	}
	ReadMessageStub        func(io.Reader) (message.Message, error)
	readMessageMutex       sync.RWMutex
	readMessageArgsForCall []struct {
		arg1 io.Reader
	}
	readMessageReturns struct {
		result1 message.Message
		result2 error
	}
	readMessageReturnsOnCall map[int]struct {
		result1 message.Message
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSocketManager) ReadFileDescriptor(arg1 net.Conn) (uintptr, error) {
	fake.readFileDescriptorMutex.Lock()
	ret, specificReturn := fake.readFileDescriptorReturnsOnCall[len(fake.readFileDescriptorArgsForCall)]
	fake.readFileDescriptorArgsForCall = append(fake.readFileDescriptorArgsForCall, struct {
		arg1 net.Conn
	}{arg1})
	fake.recordInvocation("ReadFileDescriptor", []interface{}{arg1})
	fake.readFileDescriptorMutex.Unlock()
	if fake.ReadFileDescriptorStub != nil {
		return fake.ReadFileDescriptorStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readFileDescriptorReturns.result1, fake.readFileDescriptorReturns.result2
}

func (fake *FakeSocketManager) ReadFileDescriptorCallCount() int {
	fake.readFileDescriptorMutex.RLock()
	defer fake.readFileDescriptorMutex.RUnlock()
	return len(fake.readFileDescriptorArgsForCall)
}

func (fake *FakeSocketManager) ReadFileDescriptorArgsForCall(i int) net.Conn {
	fake.readFileDescriptorMutex.RLock()
	defer fake.readFileDescriptorMutex.RUnlock()
	return fake.readFileDescriptorArgsForCall[i].arg1
}

func (fake *FakeSocketManager) ReadFileDescriptorReturns(result1 uintptr, result2 error) {
	fake.ReadFileDescriptorStub = nil
	fake.readFileDescriptorReturns = struct {
		result1 uintptr
		result2 error
	}{result1, result2}
}

func (fake *FakeSocketManager) ReadFileDescriptorReturnsOnCall(i int, result1 uintptr, result2 error) {
	fake.ReadFileDescriptorStub = nil
	if fake.readFileDescriptorReturnsOnCall == nil {
		fake.readFileDescriptorReturnsOnCall = make(map[int]struct {
			result1 uintptr
			result2 error
		})
	}
	fake.readFileDescriptorReturnsOnCall[i] = struct {
		result1 uintptr
		result2 error
	}{result1, result2}
}

func (fake *FakeSocketManager) ReadMessage(arg1 io.Reader) (message.Message, error) {
	fake.readMessageMutex.Lock()
	ret, specificReturn := fake.readMessageReturnsOnCall[len(fake.readMessageArgsForCall)]
	fake.readMessageArgsForCall = append(fake.readMessageArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	fake.recordInvocation("ReadMessage", []interface{}{arg1})
	fake.readMessageMutex.Unlock()
	if fake.ReadMessageStub != nil {
		return fake.ReadMessageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readMessageReturns.result1, fake.readMessageReturns.result2
}

func (fake *FakeSocketManager) ReadMessageCallCount() int {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	return len(fake.readMessageArgsForCall)
}

func (fake *FakeSocketManager) ReadMessageArgsForCall(i int) io.Reader {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	return fake.readMessageArgsForCall[i].arg1
}

func (fake *FakeSocketManager) ReadMessageReturns(result1 message.Message, result2 error) {
	fake.ReadMessageStub = nil
	fake.readMessageReturns = struct {
		result1 message.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeSocketManager) ReadMessageReturnsOnCall(i int, result1 message.Message, result2 error) {
	fake.ReadMessageStub = nil
	if fake.readMessageReturnsOnCall == nil {
		fake.readMessageReturnsOnCall = make(map[int]struct {
			result1 message.Message
			result2 error
		})
	}
	fake.readMessageReturnsOnCall[i] = struct {
		result1 message.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeSocketManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readFileDescriptorMutex.RLock()
	defer fake.readFileDescriptorMutex.RUnlock()
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSocketManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ipc.SocketManager = new(FakeSocketManager)
